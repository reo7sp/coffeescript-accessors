// Generated by CoffeeScript 1.10.0
(function() {
  var _,
    slice = [].slice;

  _ = {};

  _.upperFirst = require('lodash.upperfirst');

  _.camelCase = require('lodash.camelcase');

  _.isString = require('lodash.isstring');

  _.isArray = require('lodash.isarray');

  module.exports = {
    bootstrap: function() {
      var accessors;
      accessors = this;
      Function.prototype.getter = function() {
        var ref;
        return (ref = accessors.getter).call.apply(ref, [accessors, this].concat(slice.call(arguments)));
      };
      Function.prototype.setter = function() {
        var ref;
        return (ref = accessors.setter).call.apply(ref, [accessors, this].concat(slice.call(arguments)));
      };
      return Function.prototype.accessor = function() {
        var ref;
        return (ref = accessors.accessor).call.apply(ref, [accessors, this].concat(slice.call(arguments)));
      };
    },
    getter: function() {
      var fields, obj;
      obj = arguments[0], fields = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      return this.instanceGetter.apply(this, [obj.prototype].concat(slice.call(fields)));
    },
    instanceGetter: function() {
      var field, fields, i, len, name, obj, prefix, type;
      obj = arguments[0], fields = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      for (i = 0, len = fields.length; i < len; i++) {
        field = fields[i];
        if (_.isString(field)) {
          this._createGetter(obj, field);
        } else {
          if (_.isArray(field)) {
            prefix = field[0], name = field[1];
          } else {
            prefix = field.prefix, type = field.type, name = field.name;
          }
          if (prefix == null) {
            prefix = (function() {
              switch (type) {
                case 'bool':
                  return 'is';
                default:
                  return 'get';
              }
            })();
          }
          this._createGetter(obj, name, prefix);
        }
      }
    },
    reader: function() {
      return this.getter.apply(this, arguments);
    },
    instanceReader: function() {
      return this.instanceGetter.apply(this, arguments);
    },
    setter: function() {
      var fields, obj;
      obj = arguments[0], fields = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      return this.instanceSetter.apply(this, [obj.prototype].concat(slice.call(fields)));
    },
    instanceSetter: function() {
      var field, fields, i, len, name, obj, prefix;
      obj = arguments[0], fields = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      for (i = 0, len = fields.length; i < len; i++) {
        field = fields[i];
        if (_.isString(field)) {
          this._createSetter(obj, field);
        } else {
          if (_.isArray(field)) {
            prefix = field[0], name = field[1];
          } else {
            name = field.name;
          }
          if (prefix == null) {
            prefix = 'set';
          }
          this._createSetter(obj, name, prefix);
        }
      }
    },
    writer: function() {
      return this.setter.apply(this, arguments);
    },
    instanceWriter: function() {
      return this.instanceSetter.apply(this, arguments);
    },
    accessor: function() {
      var fields, obj;
      obj = arguments[0], fields = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      this.reader.apply(this, [obj].concat(slice.call(fields)));
      return this.writer.apply(this, [obj].concat(slice.call(fields)));
    },
    instanceAccessor: function() {
      var fields, obj;
      obj = arguments[0], fields = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      this.instanceReader.apply(this, [obj].concat(slice.call(fields)));
      return this.instanceWriter.apply(this, [obj].concat(slice.call(fields)));
    },
    _createGetter: function(obj, field, prefix) {
      if (prefix == null) {
        prefix = 'get';
      }
      return obj[this._getAccessorMethodName(field, prefix)] = function() {
        return this[field];
      };
    },
    _createSetter: function(obj, field, prefix) {
      if (prefix == null) {
        prefix = 'set';
      }
      return obj[this._getAccessorMethodName(field, prefix)] = function(newValue) {
        return this[field] = newValue;
      };
    },
    _getAccessorMethodName: function(field, prefix) {
      return "" + prefix + (_.upperFirst(_.camelCase(field)));
    }
  };

}).call(this);
